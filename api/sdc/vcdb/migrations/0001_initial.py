# Generated by Django 4.2.3 on 2025-10-16 07:10

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseVehicle',
            fields=[
                ('base_vehicle_id', models.IntegerField(primary_key=True, serialize=False)),
                ('year_id', models.IntegerField()),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Base Vehicle',
                'verbose_name_plural': 'Base Vehicles',
                'db_table': 'vcdb_basevehicle',
                'ordering': ['year_id', 'make_id', 'model_id'],
            },
        ),
        migrations.CreateModel(
            name='BodyNumDoors',
            fields=[
                ('body_num_doors_id', models.IntegerField(primary_key=True, serialize=False)),
                ('body_num_doors', models.CharField(max_length=10)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Body Number of Doors',
                'verbose_name_plural': 'Body Number of Doors',
                'db_table': 'vcdb_bodynumdoors',
                'ordering': ['body_num_doors'],
            },
        ),
        migrations.CreateModel(
            name='BodyType',
            fields=[
                ('body_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('body_type_name', models.CharField(max_length=100)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Body Type',
                'verbose_name_plural': 'Body Types',
                'db_table': 'vcdb_bodytype',
                'ordering': ['body_type_name'],
            },
        ),
        migrations.CreateModel(
            name='DriveType',
            fields=[
                ('drive_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('drive_type_name', models.CharField(max_length=100)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Drive Type',
                'verbose_name_plural': 'Drive Types',
                'db_table': 'vcdb_drivetype',
                'ordering': ['drive_type_name'],
            },
        ),
        migrations.CreateModel(
            name='FuelType',
            fields=[
                ('fuel_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('fuel_type_name', models.CharField(max_length=100)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Fuel Type',
                'verbose_name_plural': 'Fuel Types',
                'db_table': 'vcdb_fueltype',
                'ordering': ['fuel_type_name'],
            },
        ),
        migrations.CreateModel(
            name='Make',
            fields=[
                ('make_id', models.IntegerField(primary_key=True, serialize=False)),
                ('make_name', models.CharField(max_length=100)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Make',
                'verbose_name_plural': 'Makes',
                'db_table': 'vcdb_make',
                'ordering': ['make_name'],
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                ('model_id', models.IntegerField(primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100)),
                ('vehicle_type_id', models.IntegerField()),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Model',
                'verbose_name_plural': 'Models',
                'db_table': 'vcdb_model',
                'ordering': ['model_name'],
            },
        ),
        migrations.CreateModel(
            name='SubModel',
            fields=[
                ('sub_model_id', models.IntegerField(primary_key=True, serialize=False)),
                ('sub_model_name', models.CharField(max_length=100)),
                ('culture_id', models.CharField(default='en-US', max_length=10)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'SubModel',
                'verbose_name_plural': 'SubModels',
                'db_table': 'vcdb_submodel',
                'ordering': ['sub_model_name'],
            },
        ),
        migrations.CreateModel(
            name='VCDBSyncLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partial Success')], default='running', max_length=20)),
                ('total_records_processed', models.IntegerField(default=0)),
                ('records_created', models.IntegerField(default=0)),
                ('records_updated', models.IntegerField(default=0)),
                ('records_skipped', models.IntegerField(default=0)),
                ('errors_count', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_details', models.JSONField(blank=True, default=dict)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'VCDB Sync Log',
                'verbose_name_plural': 'VCDB Sync Logs',
                'db_table': 'vcdb_sync_log',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('vehicle_id', models.IntegerField(primary_key=True, serialize=False)),
                ('region_id', models.IntegerField()),
                ('source', models.CharField(max_length=50)),
                ('publication_stage_id', models.IntegerField()),
                ('publication_stage_date', models.DateTimeField()),
                ('publication_stage_source', models.CharField(blank=True, max_length=100)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('base_vehicle_id', models.ForeignKey(db_column='base_vehicle_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.basevehicle')),
                ('sub_model_id', models.ForeignKey(db_column='sub_model_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.submodel')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vcdb_vehicle',
                'ordering': ['vehicle_id'],
            },
        ),
        migrations.CreateModel(
            name='EngineConfig',
            fields=[
                ('engine_config_id', models.IntegerField(primary_key=True, serialize=False)),
                ('engine_designation_id', models.IntegerField()),
                ('engine_vin_id', models.IntegerField()),
                ('valves_id', models.IntegerField()),
                ('engine_base_id', models.IntegerField()),
                ('fuel_delivery_config_id', models.IntegerField()),
                ('aspiration_id', models.IntegerField()),
                ('cylinder_head_type_id', models.IntegerField()),
                ('ignition_system_type_id', models.IntegerField()),
                ('engine_mfr_id', models.IntegerField()),
                ('engine_version_id', models.IntegerField()),
                ('power_output_id', models.IntegerField()),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fuel_type_id', models.ForeignKey(db_column='fuel_type_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.fueltype')),
            ],
            options={
                'verbose_name': 'Engine Config',
                'verbose_name_plural': 'Engine Configs',
                'db_table': 'vcdb_engineconfig',
                'ordering': ['engine_config_id'],
            },
        ),
        migrations.CreateModel(
            name='BodyStyleConfig',
            fields=[
                ('body_style_config_id', models.IntegerField(primary_key=True, serialize=False)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('body_num_doors_id', models.ForeignKey(db_column='body_num_doors_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.bodynumdoors')),
                ('body_type_id', models.ForeignKey(db_column='body_type_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.bodytype')),
            ],
            options={
                'verbose_name': 'Body Style Config',
                'verbose_name_plural': 'Body Style Configs',
                'db_table': 'vcdb_bodystyleconfig',
                'ordering': ['body_style_config_id'],
            },
        ),
        migrations.AddField(
            model_name='basevehicle',
            name='make_id',
            field=models.ForeignKey(db_column='make_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.make'),
        ),
        migrations.AddField(
            model_name='basevehicle',
            name='model_id',
            field=models.ForeignKey(db_column='model_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.model'),
        ),
        migrations.CreateModel(
            name='VehicleToEngineConfig',
            fields=[
                ('vehicle_to_engine_config_id', models.IntegerField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, max_length=50)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('engine_config_id', models.ForeignKey(db_column='engine_config_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.engineconfig')),
                ('vehicle_id', models.ForeignKey(db_column='vehicle_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle to Engine Config',
                'verbose_name_plural': 'Vehicle to Engine Configs',
                'db_table': 'vcdb_vehicletotoengineconfig',
                'ordering': ['vehicle_to_engine_config_id'],
                'unique_together': {('vehicle_id', 'engine_config_id')},
            },
        ),
        migrations.CreateModel(
            name='VehicleToDriveType',
            fields=[
                ('vehicle_to_drive_type_id', models.IntegerField(primary_key=True, serialize=False)),
                ('source', models.CharField(max_length=50)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('drive_type_id', models.ForeignKey(db_column='drive_type_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.drivetype')),
                ('vehicle_id', models.ForeignKey(db_column='vehicle_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle to Drive Type',
                'verbose_name_plural': 'Vehicle to Drive Types',
                'db_table': 'vcdb_vehicletodrivetype',
                'ordering': ['vehicle_to_drive_type_id'],
                'unique_together': {('vehicle_id', 'drive_type_id')},
            },
        ),
        migrations.CreateModel(
            name='VehicleToBodyStyleConfig',
            fields=[
                ('vehicle_to_body_style_config_id', models.IntegerField(primary_key=True, serialize=False)),
                ('source', models.CharField(blank=True, max_length=50)),
                ('effective_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('body_style_config_id', models.ForeignKey(db_column='body_style_config_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.bodystyleconfig')),
                ('vehicle_id', models.ForeignKey(db_column='vehicle_id', on_delete=django.db.models.deletion.CASCADE, to='vcdb.vehicle')),
            ],
            options={
                'verbose_name': 'Vehicle to Body Style Config',
                'verbose_name_plural': 'Vehicle to Body Style Configs',
                'db_table': 'vcdb_vehicletobodystyleconfig',
                'ordering': ['vehicle_to_body_style_config_id'],
                'unique_together': {('vehicle_id', 'body_style_config_id')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='basevehicle',
            unique_together={('make_id', 'model_id', 'year_id')},
        ),
    ]
