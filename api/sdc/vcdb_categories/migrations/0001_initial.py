# Generated by Django 4.2.3 on 2025-10-06 10:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('tenants', '0003_make_slug_optional'),
    ]

    operations = [
        migrations.CreateModel(
            name='VCDBCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Category name (e.g., Light Duty, Heavy Duty)', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Category description', null=True)),
                ('file', models.FileField(help_text='VCDB data file for this category', upload_to='vcdb_categories/')),
                ('filename', models.CharField(max_length=255)),
                ('file_size', models.BigIntegerField(default=0)),
                ('version', models.CharField(default='v1', help_text='Version like v1, v2, etc.', max_length=10)),
                ('is_valid', models.BooleanField(default=False)),
                ('validation_errors', models.JSONField(blank=True, default=dict)),
                ('record_count', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vcdb_categories', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'VCDB Category',
                'verbose_name_plural': 'VCDB Categories',
                'ordering': ['-created_at'],
                'unique_together': {('tenant', 'name', 'version')},
            },
        ),
        migrations.CreateModel(
            name='FitmentJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('job_type', models.CharField(choices=[('manual', 'Manual Fitment'), ('ai', 'AI Fitment')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('vcdb_categories', models.JSONField(default=list, help_text='Selected VCDB categories')),
                ('product_fields', models.JSONField(default=dict, help_text='Product field configuration')),
                ('ai_instructions', models.TextField(blank=True, null=True)),
                ('progress_percentage', models.IntegerField(default=0)),
                ('current_step', models.CharField(blank=True, max_length=100)),
                ('total_steps', models.IntegerField(default=0)),
                ('completed_steps', models.IntegerField(default=0)),
                ('fitments_created', models.IntegerField(default=0)),
                ('fitments_failed', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fitment_jobs', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'Fitment Job',
                'verbose_name_plural': 'Fitment Jobs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIFitment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('submodel', models.CharField(blank=True, max_length=100)),
                ('drive_type', models.CharField(blank=True, max_length=50)),
                ('fuel_type', models.CharField(blank=True, max_length=50)),
                ('num_doors', models.IntegerField(blank=True, null=True)),
                ('body_type', models.CharField(blank=True, max_length=100)),
                ('part_id', models.CharField(max_length=100)),
                ('part_description', models.TextField()),
                ('position', models.CharField(max_length=100)),
                ('quantity', models.IntegerField(default=1)),
                ('confidence_score', models.FloatField(help_text='AI confidence score (0-1)')),
                ('ai_reasoning', models.TextField(help_text='AI explanation for this fitment')),
                ('ai_instructions_used', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('dynamic_fields', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_fitments', to='vcdb_categories.fitmentjob')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_fitments', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'AI Fitment',
                'verbose_name_plural': 'AI Fitments',
                'ordering': ['-confidence_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='VCDBData',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('year', models.IntegerField()),
                ('make', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
                ('submodel', models.CharField(blank=True, max_length=100)),
                ('drive_type', models.CharField(blank=True, max_length=50)),
                ('fuel_type', models.CharField(blank=True, max_length=50)),
                ('num_doors', models.IntegerField(blank=True, null=True)),
                ('body_type', models.CharField(blank=True, max_length=100)),
                ('engine_type', models.CharField(blank=True, max_length=100)),
                ('transmission', models.CharField(blank=True, max_length=100)),
                ('trim_level', models.CharField(blank=True, max_length=100)),
                ('dynamic_fields', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vcdb_data', to='vcdb_categories.vcdbcategory')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vcdb_data_records', to='tenants.tenant')),
            ],
            options={
                'verbose_name': 'VCDB Data Record',
                'verbose_name_plural': 'VCDB Data Records',
                'ordering': ['year', 'make', 'model'],
                'unique_together': {('category', 'year', 'make', 'model', 'submodel', 'drive_type')},
            },
        ),
    ]
